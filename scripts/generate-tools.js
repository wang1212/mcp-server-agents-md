import fs from 'node:fs';
import path from 'node:path';
import { fileURLToPath, URL } from 'node:url';
import matter from 'gray-matter';

const projectRoot = process.cwd();
const agentsDir = path.join(projectRoot, 'src', 'agents');
const outputFile = path.join(projectRoot, 'src', 'tools.ts');
const currentFileName = new URL(import.meta.url).pathname.split('/').pop();

/**
 * Generate tools definition file from agents markdown files
 */
function main() {
  console.log('Generating tools definition...');
  console.log(`Scanning agents directory: ${agentsDir}`);

  // Check if agents directory exists
  if (!fs.existsSync(agentsDir)) {
    console.error(`Agents directory not found: ${agentsDir}`);
    process.exit(1);
  }

  const tools = {};
  const files = fs.readdirSync(agentsDir);
  const mdFiles = files.filter((file) => file.endsWith('.md'));

  console.log(`Found ${mdFiles.length} agent markdown files`);

  for (const file of mdFiles) {
    const filePath = path.join(agentsDir, file);
    const fileContent = fs.readFileSync(filePath, 'utf-8');
    const parsed = matter(fileContent);

    // Extract front-matter
    const frontMatter = parsed.data;

    // Validate required front-matter fields
    if (!frontMatter.name || !frontMatter.description || !frontMatter.trigger) {
      throw Error(
        `${file}: Missing required front-matter fields (name, description, trigger)`,
      );
    }

    const toolName = frontMatter.name;
    const triggerCommandPrefix = 'cc:';
    const triggerCommands = frontMatter.trigger
      .split(',')
      .map((t) => `\"${triggerCommandPrefix}${t.trim()}\"`);

    // Create tool metadata
    const toolMetadata = {
      tool: {
        name: toolName,
        description: `${frontMatter.description} It can be triggered by commands one of ${triggerCommands.join(',')}`,
        inputSchema: {
          type: 'object',
          properties: {
            userInput: {
              type: 'string',
              description: 'Input for the agent task',
            },
          },
          required: [],
        },
      },
      prompt: parsed.content,
      metaInfo: frontMatter,
    };

    if (tools[toolName]) {
      throw Error('');
    }
    tools[toolName] = toolMetadata;
  }

  // Generate TypeScript file content
  const tsContent = `// This file is auto-generated by ${currentFileName}. Do not edit manually.
// Generated at: ${new Date().toISOString()}

import type { Tool } from '@modelcontextprotocol/sdk/types.js';

export interface AgentMetaInfo {
  name: string;
  description: string;
  /** Triggers quickly allow LLM to identify calling tools, which is more accurate than natural language prompts. */
  trigger: string;
}

export interface AgentToolMetadata {
  tool: Tool;
  prompt: string;
  metaInfo: AgentMetaInfo;
}

export const agentTools: Record<string, AgentToolMetadata> = ${JSON.stringify(tools, null, 2)};

`;

  // Write the generated file
  fs.writeFileSync(outputFile, tsContent, 'utf-8');

  console.log(`âœ“ Successfully generated ${Object.keys(tools).length} tools`);
}

main();
